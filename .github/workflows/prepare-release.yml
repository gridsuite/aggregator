name: Prepare release
on:
  workflow_dispatch:
    inputs:
      repos_to_release:
        description: "Manual list of repositories to release (.github/config/repos-to-release.txt content if left empty)"
        default: ""
        required: false
      target_date:
        description: "Date of last commit to inlude (ISO 8601, ex: 2024-09-13T23:59:59Z - default : last friday 23:59:59)."
        required: false
      release-version:
        description: "Version for new tag (ex: v2.8.0)"
        required: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout aggregator repository
        uses: actions/checkout@v4
        with:
          submodules: false
          ref: release-workflow

      - name: Auth GH CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Load repo list from file or input
        id: load_repos
        run: |
          if [[ -z "${{ github.event.inputs.repos_to_release }}" ]]; then
            echo "ℹ️ No user input → load .github/config/repos-to-release.txt"
            list="$(cat .github/config/repos-to-release.txt)"
          else
            echo "ℹ️ Input found → load user input"
            list="${{ github.event.inputs.repos_to_release }}"
          fi
          echo "list<<EOF" >> $GITHUB_OUTPUT
          echo "$list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract last commit date (last friday 23:59 UTC if left empty)
        id: load_date
        run: |
          if [ -z "${{ github.event.inputs.target_date }}" ]; then
            date_value=$(date -u -d "last friday 23:59" +"%Y-%m-%dT%H:%M:%SZ")
          else
            date_value="${{ github.event.inputs.target_date }}"
          fi
          echo "date_value=$date_value" >> $GITHUB_OUTPUT
          echo "This limit date will be used : $date_value"

      - name: Lister les SHAs des commits
        run: |
          mkdir public_repos
          cd public_repos

          while read url; do
              git clone $url
              folder=$(basename "$url" .git)
              cd $folder
              commit_date='${{ steps.load_date.outputs.date_value }}''
              commit_hash=$(git rev-list -n 1 --before="$commit_date" main)
              git checkout $commit_hash

              branch_name="prepare-release-${{github.event.inputs.release-version}}"
              # Check if *branch_name* already exists
              if git show-ref --verify --quiet "refs/heads/$branch_name"; then
                  echo "❌ Warning for $folder: Branch $branch_name already exists"
                  exit 1
              fi
              git checkout -b "$branch_name"

              if ! git push origin "$branch_name"; then
                  echo "❌ Error for $folder: Failed to push $branch_name"
                  exit 1
              fi

              commit_message=$(git log -1 --pretty=%s | cut -c1-50)

              echo "✅ $folder tagged → $commit_hash | $commit_message"
              cd - > /dev/null
          done <<< "${{ steps.load_repos.outputs.list }}"